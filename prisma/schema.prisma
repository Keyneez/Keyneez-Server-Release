generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ContentCategories {
  category_pk Int        @id @unique @default(autoincrement())
  category    String     @unique @db.VarChar(30)
  Contents    Contents[]
  Tags        Tags[]
}

model Tags {
  tag_pk            Int               @id @unique @default(autoincrement())
  tag               String            @unique @db.VarChar(30)
  category_fk       Int
  Contents          Contents[]
  ContentCategories ContentCategories @relation(fields: [category_fk], references: [category_pk], onDelete: Cascade, map: "category_fk")
  UserTags          UserTags[]
}

model Contents {
  content_pk        Int                 @id @unique @default(autoincrement())
  title             String              @db.VarChar(30)
  link              String              @db.VarChar(100)
  img               String              @db.VarChar(100)
  place             String              @db.VarChar(30)
  introduction      String              @db.VarChar(200)
  start_at          String?             @db.VarChar(10)
  end_at            String?             @db.VarChar(10)
  inquiry           String[]
  price             String[]
  benefit           String[]
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  category          String              @db.VarChar(30)
  tag               String?             @db.VarChar(30)
  ContentCategories ContentCategories   @relation(fields: [category], references: [category], onDelete: Cascade, map: "category_fk")
  Tags              Tags?               @relation(fields: [tag], references: [tag], onDelete: Cascade, map: "tag_fk")
  Likes             Likes[]
}

model Likes {
  liked_pk Int      @id @unique @default(autoincrement())
  user     Int
  content  Int
  Contents Contents @relation(fields: [content], references: [content_pk], onDelete: Cascade, map: "content_fk")
  Users    Users    @relation(fields: [user], references: [user_pk], onDelete: Cascade, map: "user_fk")

  @@unique([user, content], name: "likes_userid")
  @@index([user, content])
}

model Users {
  user_pk       Int        @id @unique @default(autoincrement())
  nickname      String     @db.VarChar(6)
  email         String     @db.VarChar(30)
  sns_id        String
  age           Int
  gender        String     @db.Char(1)
  refresh_token String?    @db.VarChar(200)
  birth         String     @db.VarChar(30)
  sns_type      String     @db.VarChar(30)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  Likes         Likes[]
  UserTags      UserTags[]

  @@unique([sns_id, sns_type], name: "sns_identifer")
}

model UserTags {
  user_tag_pk Int   @id @default(autoincrement())
  user_fk     Int
  tag_fk      Int
  Tags        Tags  @relation(fields: [tag_fk], references: [tag_pk], onDelete: Cascade)
  Users       Users @relation(fields: [user_fk], references: [user_pk], onDelete: Cascade)

  @@unique([user_fk, tag_fk], name: "users_tags")
}
